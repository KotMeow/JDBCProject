package com.example.IWTWJdbc.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.IWTWJdbc.domain.Movie;
import com.example.IWTWJdbc.domain.Actor;

public class MoviesManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableMovie = "CREATE TABLE Movie(id bigint GENERATED BY DEFAULT AS IDENTITY, title varchar(40), releaseYear integer, genre varchar(20), isFavorite BOOLEAN DEFAULT FALSE)";
	private String createTableActor = "CREATE TABLE Actor(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(40), role varchar(40),  movie_id INT references Movie(id))";

	private PreparedStatement addMovieStmt;
	private PreparedStatement deleteAllMoviesStmt;
	private PreparedStatement getAllMoviesStmt;
	private PreparedStatement deleteMovieStmt;
	private PreparedStatement updateMovieStmt;

	private Statement statement;

	public MoviesManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Movie".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableMovie);

			addMovieStmt = connection
					.prepareStatement("INSERT INTO Movie (title, releaseYear, genre, isFavorite) VALUES (?, ?, ?, ?)");
			deleteAllMoviesStmt = connection
					.prepareStatement("DELETE FROM Movie");
			getAllMoviesStmt = connection
					.prepareStatement("SELECT id, title, releaseYear, genre, isFavorite FROM Movie");
			deleteMovieStmt =  connection
					.prepareStatement("DELETE FROM Movie WHERE id = ?");
			updateMovieStmt = connection
					.prepareStatement("UPDATE Movie SET title=?, releaseYear=?, genre = ?, isFavorite = ? WHERE id =?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	void clearMovies() {
		try {
			deleteAllMoviesStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addMovie(Movie movie) {
		int count = 0;
		try {
			addMovieStmt.setString(1, movie.getTitle());
			addMovieStmt.setInt(2, movie.getReleaseYear());
			addMovieStmt.setString(3, movie.getGenre());
			addMovieStmt.setBoolean(4, movie.getIsFavorite());

			count = addMovieStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int deleteMovie(int id) {
		int count = 0;
		try {
			deleteMovieStmt.setInt(1, id);
			count = deleteMovieStmt.executeUpdate();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}

		return count;
	}

	public void updateMovie(int movie_id, String title, int releaseYear, String genre, boolean isFavorite){
		try {
			updateMovieStmt.setString(1,title);
			updateMovieStmt.setInt(2,releaseYear);
			updateMovieStmt.setString(3,genre);
			updateMovieStmt.setBoolean(4, isFavorite);
			updateMovieStmt.setInt(5, movie_id);

			updateMovieStmt.executeUpdate();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
	}
	public List<Movie> getAllMovies() {
		List<Movie> movies = new ArrayList<Movie>();

		try {
			ResultSet rs = getAllMoviesStmt.executeQuery();

			while (rs.next()) {
				Movie p = new Movie();
				p.setId(rs.getInt("id"));
				p.setTitle(rs.getString("title"));
				p.setReleaseYear(rs.getInt("releaseYear"));
				p.setGenre(rs.getString("genre"));
				p.setIsFavorite(rs.getBoolean("isFavorite"));
				movies.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return movies;
	}

}
