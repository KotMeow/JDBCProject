package com.example.IWTWJdbc.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.IWTWJdbc.domain.Movie;
import com.example.IWTWJdbc.domain.Actor;

public class MoviesManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableMovie = "CREATE TABLE Movie(id bigint GENERATED BY DEFAULT AS IDENTITY, title varchar(40), releaseYear integer, genre varchar(20), isFavorite BOOLEAN DEFAULT FALSE)";
	private String createTableActor = "CREATE TABLE Actor(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(40), role varchar(40), movieId INT)";
	//movieId INT references Movie(id);


	private PreparedStatement addMovieStmt;
	private PreparedStatement deleteAllMoviesStmt;
	private PreparedStatement getAllMoviesStmt;
	private PreparedStatement deleteMovieStmt;
	private PreparedStatement updateMovieStmt;

	private PreparedStatement addActorStmt;
	private PreparedStatement deleteAllActorsStmt;
	private PreparedStatement deleteActorStmt;
	private PreparedStatement getAllActorsStmt;
	private PreparedStatement updateActorStmt;
	private PreparedStatement getMovieActorsStmt;

	private Statement statement;

	public MoviesManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableMovieExists = false;
			boolean tableActorExists = false;
			while (rs.next()) {
				if ("Movie".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableMovieExists = true;
					break;
				}

			}
			ResultSet rs2 = connection.getMetaData().getTables(null,null,null,null);
			while (rs2.next()){
				if("Actor".equalsIgnoreCase(rs2.getString("TABLE_NAME"))){
					tableActorExists = true;
					break;
				}
			}

			if (!tableMovieExists)
				statement.executeUpdate(createTableMovie);
			if (!tableActorExists)
				statement.executeUpdate(createTableActor);

			addMovieStmt = connection
					.prepareStatement("INSERT INTO Movie (title, releaseYear, genre, isFavorite) VALUES (?, ?, ?, ?)");
			deleteAllMoviesStmt = connection
					.prepareStatement("DELETE FROM Movie");
			deleteAllActorsStmt = connection
					.prepareStatement("DELETE FROM Actor");
			getAllMoviesStmt = connection
					.prepareStatement("SELECT id, title, releaseYear, genre, isFavorite FROM Movie");
			getAllActorsStmt = connection
					.prepareStatement("SELECT id, name, role, movieId FROM Actor");					
			deleteMovieStmt =  connection
					.prepareStatement("DELETE FROM Movie WHERE id = ?");
			deleteActorStmt =  connection
					.prepareStatement("DELETE FROM Actor WHERE id = ?");
			updateMovieStmt = connection
					.prepareStatement("UPDATE Movie SET title=?, releaseYear=?, genre = ?, isFavorite = ? WHERE id =?");
			updateActorStmt = connection
					.prepareStatement("UPDATE Actor SET name=?, role=? WHERE id =?");
			addActorStmt = connection
					.prepareStatement("INSERT INTO Actor (name, role, movieId) VALUES (?, ?, ?)");
			getMovieActorsStmt = connection
					.prepareStatement("SELECT * FROM Actor JOIN Movie ON (Actor.movieID = Movie.id) WHERE Movie.id = ?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	void clearMovies() {
		try {
			deleteAllMoviesStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	void clearActors() {
		try {
			deleteAllActorsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addMovie(Movie movie) {
		int count = 0;
		try {
			addMovieStmt.setString(1, movie.getTitle());
			addMovieStmt.setInt(2, movie.getReleaseYear());
			addMovieStmt.setString(3, movie.getGenre());
			addMovieStmt.setBoolean(4, movie.getIsFavorite());

			count = addMovieStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int addActor(int id, Actor actor) {
		int count = 0;
		try {
			addActorStmt.setString(1, actor.getName());
			addActorStmt.setString(2, actor.getRole());
			addActorStmt.setInt(3, id);

			count = addActorStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int deleteMovie(int id) {
		int count = 0;
		try {
			deleteMovieStmt.setInt(1, id);
			count = deleteMovieStmt.executeUpdate();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}

		return count;
	}

	public int deleteActor(int id) {
		int count = 0;
		try {
			deleteActorStmt.setInt(1, id);
			count = deleteActorStmt.executeUpdate();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public void updateMovie(int movieId, String title, int releaseYear, String genre, boolean isFavorite){
		try {
			updateMovieStmt.setString(1,title);
			updateMovieStmt.setInt(2,releaseYear);
			updateMovieStmt.setString(3,genre);
			updateMovieStmt.setBoolean(4, isFavorite);
			updateMovieStmt.setInt(5, movieId);

			updateMovieStmt.executeUpdate();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
	}

	public void updateActor(int actor_id, String name, String role){
		try {
			updateActorStmt.setString(1,name);
			updateActorStmt.setString(2,role);
			updateActorStmt.setInt(3, actor_id);
			updateActorStmt.executeUpdate();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
	}
	public List<Movie> getAllMovies() {
		List<Movie> movies = new ArrayList<Movie>();

		try {
			ResultSet rs = getAllMoviesStmt.executeQuery();

			while (rs.next()) {
				Movie p = new Movie();
				p.setId(rs.getInt("id"));
				p.setTitle(rs.getString("title"));
				p.setReleaseYear(rs.getInt("releaseYear"));
				p.setGenre(rs.getString("genre"));
				p.setIsFavorite(rs.getBoolean("isFavorite"));
				movies.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return movies;
	}

	public List<Actor> getAllActors() {
		List<Actor> actors = new ArrayList<Actor>();

		try {
			ResultSet rs = getAllActorsStmt.executeQuery();

			while (rs.next()) {
				Actor p = new Actor();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setRole(rs.getString("role"));
				p.setMovieId(rs.getInt("movieId"));
				actors.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return actors;
	}

	public List<Actor> getAllMovieActors(int movieId) {
		List<Actor> actors = new ArrayList<Actor>();

		try {
			getMovieActorsStmt.setInt(1,movieId);
			ResultSet rs = getMovieActorsStmt.executeQuery();

			while (rs.next()) {
				Actor p = new Actor();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setRole(rs.getString("role"));
				p.setMovieId(rs.getInt("movieId"));
				actors.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return actors;
	}

}
