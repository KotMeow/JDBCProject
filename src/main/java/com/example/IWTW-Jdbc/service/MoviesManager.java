package com.example.IWTW-Jdbc.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.IWTW-Jdbc.domain.Movie;
import com.example.IWTW-Jdbc.domain.Actor;

public class MoviesManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableMovie = "CREATE TABLE Movie(id bigint GENERATED BY DEFAULT AS IDENTITY, title varchar(40), releaseYear integer, genre varchar(20), isFavorite BOOLEAN DEFAULT FALSE)";

	private PreparedStatement addMovieStmt;
	private PreparedStatement deleteAllMoviesStmt;
	private PreparedStatement getAllMoviesStmt;

	private Statement statement;

	public MoviesManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Movie".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableMovie);

			addMovieStmt = connection
					.prepareStatement("INSERT INTO Movie (name, yob) VALUES (?, ?)");
			deleteAllMoviesStmt = connection
					.prepareStatement("DELETE FROM Movie");
			getAllMoviesStmt = connection
					.prepareStatement("SELECT id, name, yob FROM Movie");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	void clearPersons() {
		try {
			deleteAllMoviesStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addPerson(Movie movie) {
		int count = 0;
		try {
			addMovieStmt.setString(1, movie.getName());
			addMovieStmt.setInt(2, movie.getYob());

			count = addMovieStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Movie> getAllPersons() {
		List<Movie> persons = new ArrayList<Movie>();

		try {
			ResultSet rs = getAllMoviesStmt.executeQuery();

			while (rs.next()) {
				Movie p = new Movie();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setYob(rs.getInt("yob"));
				persons.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return persons;
	}

}
